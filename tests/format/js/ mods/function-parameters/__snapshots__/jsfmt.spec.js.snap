// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`function-parameters.js format 1`] = `
====================================options=====================================
parsers: ["babel", "flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================

async function request(api, { bla }, {
  url,
  method = 'get',
  params = null,
  query = params || null,
  headers = null,
  data = null
}) {
  //
}


async function request(api, {
  bla //
}, {
  url,
  method = 'get',
  params = null,
  query = params || null,
  headers = null,
  data = null
}) {
  //
}

async function request(api, {
  url, //
  method,
  params,
  query,
  headers,
  data
}) {
  //
}

request(api, {
  url,
  method: 'get',
  params: null,
  query: params
})

request(api, { bla }, {
  url,
  method: 'get',
  params: null,
  query: params
})

const relation = new RelationController(
  this, object, relationInstance, relationDefinition
)

async function mapConcurrently1(input, callback,
  { concurrency = 0 }
) {
}

async function mapConcurrently2(input, callback,
  { concurrency = 0 } = {}
) {
}

async function mapConcurrently3(
  input,
  callback,
  { concurrency = 0 }
) {
}

async function mapConcurrently4(
  input,
  callback,
  { concurrency = 0 } = {}
) {
}

const mapConcurrently5 = (input, callback,
  { concurrency = 0 }
) => {
}

const mapConcurrently6 = (input, callback,
  { concurrency = 0 } = {}
) => {
}

const mapConcurrently7 = (
  input,
  callback,
  { concurrency = 0 }
) => {
}

const mapConcurrently8 = (
  input,
  callback,
  { concurrency = 0 } = {}
) => {
}

function test(foo, bar) {
}

function test(
foo, bar
) {
}

function test(
foo,
bar
) {
}

function test(
foo
) {
}

=====================================output=====================================
async function request(
  api,
  { bla },
  {
    url,
    method = "get",
    params = null,
    query = params || null,
    headers = null,
    data = null,
  }
) {
  //
}

async function request(
  api,
  {
    bla, //
  },
  {
    url,
    method = "get",
    params = null,
    query = params || null,
    headers = null,
    data = null,
  }
) {
  //
}

async function request(api, {
  url, //
  method,
  params,
  query,
  headers,
  data,
}) {
  //
}

request(api, {
  url,
  method: "get",
  params: null,
  query: params,
});

request(
  api,
  { bla },
  {
    url,
    method: "get",
    params: null,
    query: params,
  }
);

const relation = new RelationController(
  this,
  object,
  relationInstance,
  relationDefinition
);

async function mapConcurrently1(input, callback, { concurrency = 0 }) {}

async function mapConcurrently2(input, callback, { concurrency = 0 } = {}) {}

async function mapConcurrently3(
  input,
  callback,
  { concurrency = 0 }
) {}

async function mapConcurrently4(
  input,
  callback,
  { concurrency = 0 } = {}
) {}

const mapConcurrently5 = (input, callback, { concurrency = 0 }) => {};

const mapConcurrently6 = (input, callback, { concurrency = 0 } = {}) => {};

const mapConcurrently7 = (
  input,
  callback,
  { concurrency = 0 }
) => {};

const mapConcurrently8 = (
  input,
  callback,
  { concurrency = 0 } = {}
) => {};

function test(foo, bar) {}

function test(
  foo,
  bar
) {}

function test(
  foo,
  bar
) {}

function test(
  foo
) {}

================================================================================
`;
